###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml-py
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401,F821
# flake8: noqa: E501,F401,F821
# pylint: disable=unused-import,line-too-long
# fmt: off

file_map = {
    
    "clients.baml": "// Learn more about clients at https://docs.boundaryml.com/docs/snippets/clients/overview\n\nclient<llm> Gemma3 {\n  provider ollama\n  options {\n    base_url \"http://localhost:11434/v1\"\n    model \"gemma3:12b\"\n  }\n}\n\n// client<llm> Gemma3_12B {\n//   provider ollama\n//   options {\n//     base_url \"http://localhost:11434/v1\"\n//     model \"gemma3:12b\"\n//   }\n// }\n\n// https://docs.boundaryml.com/docs/snippets/clients/retry\nretry_policy Constant {\n  max_retries 3\n  // Strategy is optional\n  strategy {\n    type constant_delay\n    delay_ms 200\n  }\n}\n\nretry_policy Exponential {\n  max_retries 2\n  // Strategy is optional\n  strategy {\n    type exponential_backoff\n    delay_ms 300\n    mutliplier 1.5\n    max_delay_ms 10000\n  }\n}",
    "flashcard_creator.baml": "class StudyInput {\n    text string\n    highlights string[]\n    notes string[]\n}\n\nclass Flashcard {\n    type FlashcardType\n    front string\n    back string\n}\n\nenum FlashcardType {\n    BASIC_FACT\n    EXPLANATION\n    APPLICATION\n    CONTEXT\n}\n\nfunction GenerateFlashcardsDetailed(input: StudyInput) -> Flashcard[] {\n    client Gemma3\n\n    prompt #\"\n        Generate focused flashcards from the following text, highlighted sections, and notes. \n        Each card should target one discrete concept or fact.\n\n        Text:\n        ---\n        {{ input.text }}\n        ---\n\n        Highlighted Sections:\n        {% for highlight in input.highlights %}\n        - {{ highlight }}\n        {% endfor %}\n\n        Notes:\n        {% for note in input.notes %}\n        - {{ note }}\n        {% endfor %}\n\n        Create flashcards following these formats:\n\n        1. Basic Fact/Concept (type: BASIC_FACT)\n        - Front: What is [concept]?\n        - Back: [concise definition, avoiding question phrasing]\n\n        2. Explanation/Understanding (type: EXPLANATION)\n        - Front: Why does [concept/phenomenon] occur?\n        - Back: [mechanism/rationale]\n\n        3. Application (type: APPLICATION)\n        - Front: How would you use [concept] to solve [specific scenario]?\n        - Back: [concrete application steps]\n\n        4. Context/Relationship (type: CONTEXT)\n        - Front: How does [concept] relate to [related concept]?\n        - Back: [key relationship/distinction]\n\n        Guidelines:\n        - Each card focuses on one specific detail\n        - Questions are precise and unambiguous \n        - Answers don't repeat question phrasing\n        - Include explanatory cards for important concepts\n        - Add helpful cues that don't give away answers\n        - Avoid cards requiring lists of items\n\n        {{ ctx.output_format }}\n\n        JSON:\n    \"#\n}\n\nfunction GenerateFlashcardsSimple(input: StudyInput) -> Flashcard[] {\n    client Gemma3\n\n    prompt #\"\n        Create concise, simple, straightforward and distinct Anki cards to study the following text, highlights, and notes. \n        Each with a front and back. Avoid repeating the content in the front on the back of the card. \n        In particular, if the front is a question and the back an answer, avoid repeating the phrasing of the question as the initial part of the answer. \n        Avoid explicitly referring to the author or the article in the cards, and instead treat the article as factual and independent of the author.\n        \n        Text:\n        ---\n        {{ input.text }}\n        ---\n\n        Highlighted Sections:\n        {% for highlight in input.highlights %}\n        - {{ highlight }}\n        {% endfor %}\n\n        Notes:\n        {% for note in input.notes %}\n        - {{ note }}\n        {% endfor %}\n\n        {{ ctx.output_format }}\n\n        JSON:\n    \"#\n}\n\n\ntest TestFlashcards {\n    functions [GenerateFlashcardsSimple]\n    args {\n        input {\n            text #\"\n                Book text goes here when testing...\n            \"#\n            highlights []\n            notes []\n        }\n    }\n}",
    "generators.baml": "// This helps use auto generate libraries you can use in the language of\n// your choice. You can have multiple generators if you use multiple languages.\n// Just ensure that the output_dir is different for each generator.\ngenerator target {\n    // Valid values: \"python/pydantic\", \"typescript\", \"ruby/sorbet\", \"rest/openapi\"\n    output_type \"python/pydantic\"\n\n    // Where the generated code will be saved (relative to baml_src/)\n    output_dir \"../\"\n\n    // The version of the BAML package you have installed (e.g. same version as your baml-py or @boundaryml/baml).\n    // The BAML VSCode extension version should also match this version.\n    version \"0.80.1\"\n\n    // Valid values: \"sync\", \"async\"\n    // This controls what `b.FunctionName()` will be (sync or async).\n    default_client_mode sync\n}\n",
}

def get_baml_files():
    return file_map